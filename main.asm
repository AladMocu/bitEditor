; Listing generated by Microsoft (R) Optimizing Compiler Version 19.13.26128.0 

	TITLE	C:\Users\User\Dropbox\AladThings\uniandes\Infratec\main.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG9757	DB	'PROYECTO 1 - INFRATEC.', 00H
	ORG $+1
$SG9758	DB	0aH, 0aH, '* Indique la modalidad', 0aH, 09H, '0: Termina'
	DB	'r', 0aH, 09H, '1: Escribir', 0aH, 09H, '2: Leer', 0aH, 0aH, 00H
	ORG $+2
$SG9759	DB	'Modalidad: ', 00H
$SG9760	DB	'%d', 00H
	ORG $+1
$SG9763	DB	'Acci? %d: Escribir', 0aH, 0aH, 00H
	ORG $+3
$SG9764	DB	'Escriba s: ', 00H
$SG9765	DB	'%s', 00H
	ORG $+1
$SG9766	DB	'Se leyeron los siguientes bits: %s', 0aH, 00H
$SG9767	DB	'Escriba p: ', 00H
$SG9768	DB	'%d', 00H
	ORG $+1
$SG9769	DB	0aH, 'Se escribia s desde el bit p de V.', 0aH, 00H
	ORG $+3
$SG9772	DB	'Acci? %d: Leer', 0aH, 0aH, 00H
	ORG $+3
$SG9773	DB	'Escriba l: ', 00H
$SG9774	DB	'%d', 00H
	ORG $+1
$SG9775	DB	'Escriba p: ', 00H
$SG9776	DB	'%d', 00H
	ORG $+1
$SG9777	DB	'Se leyeron los siguientes bits: %s', 0aH, 00H
$SG9779	DB	'Opci? invalida.', 0aH, 00H
	ORG $+3
$SG9780	DB	0aH, 'Programa terminado.', 0aH, 00H
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	___local_stdio_scanf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	__vfscanf_l
PUBLIC	_scanf
PUBLIC	_escribir
PUBLIC	_leer
PUBLIC	_main
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___stdio_common_vfscanf:PROC
EXTRN	_calloc:PROC
EXTRN	_strlen:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_a$ = -24						; size = 4
_l$ = -20						; size = 4
_V$ = -16						; size = 4
_p$ = -12						; size = 4
_s$ = -8						; size = 4
_op$ = -4						; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC
; File c:\users\user\dropbox\aladthings\uniandes\infratec\main.c
; Line 22
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 31
	push	1
	push	100					; 00000064H
	call	_calloc
	add	esp, 8
	mov	DWORD PTR _V$[ebp], eax
; Line 32
	push	1
	push	17					; 00000011H
	call	_calloc
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax
; Line 33
	push	1
	push	7
	call	_calloc
	add	esp, 8
	mov	DWORD PTR _a$[ebp], eax
; Line 35
	push	OFFSET $SG9757
	call	_printf
	add	esp, 4
; Line 38
	mov	DWORD PTR _op$[ebp], 3
$LN2@main:
; Line 39
	cmp	DWORD PTR _op$[ebp], 0
	je	$LN3@main
; Line 41
	push	OFFSET $SG9758
	call	_printf
	add	esp, 4
; Line 44
	push	OFFSET $SG9759
	call	_printf
	add	esp, 4
; Line 45
	lea	eax, DWORD PTR _op$[ebp]
	push	eax
	push	OFFSET $SG9760
	call	_scanf
	add	esp, 8
; Line 48
	cmp	DWORD PTR _op$[ebp], 1
	jne	$LN4@main
; Line 49
	mov	ecx, DWORD PTR _op$[ebp]
	push	ecx
	push	OFFSET $SG9763
	call	_printf
	add	esp, 8
; Line 52
	push	OFFSET $SG9764
	call	_printf
	add	esp, 4
; Line 53
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	push	OFFSET $SG9765
	call	_scanf
	add	esp, 8
; Line 55
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	push	OFFSET $SG9766
	call	_printf
	add	esp, 8
; Line 56
	push	OFFSET $SG9767
	call	_printf
	add	esp, 4
; Line 57
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	push	OFFSET $SG9768
	call	_scanf
	add	esp, 8
; Line 60
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _V$[ebp]
	push	ecx
	call	_escribir
	add	esp, 12					; 0000000cH
; Line 63
	push	OFFSET $SG9769
	call	_printf
	add	esp, 4
; Line 65
	jmp	$LN5@main
$LN4@main:
; Line 67
	cmp	DWORD PTR _op$[ebp], 2
	jne	$LN6@main
; Line 68
	mov	edx, DWORD PTR _op$[ebp]
	push	edx
	push	OFFSET $SG9772
	call	_printf
	add	esp, 8
; Line 71
	push	OFFSET $SG9773
	call	_printf
	add	esp, 4
; Line 72
	lea	eax, DWORD PTR _l$[ebp]
	push	eax
	push	OFFSET $SG9774
	call	_scanf
	add	esp, 8
; Line 73
	push	OFFSET $SG9775
	call	_printf
	add	esp, 4
; Line 74
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	push	OFFSET $SG9776
	call	_scanf
	add	esp, 8
; Line 78
	push	1
	push	17					; 00000011H
	call	_calloc
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax
; Line 79
	mov	edx, DWORD PTR _l$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _V$[ebp]
	push	edx
	call	_leer
	add	esp, 16					; 00000010H
; Line 80
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	push	OFFSET $SG9777
	call	_printf
	add	esp, 8
; Line 82
	jmp	SHORT $LN5@main
$LN6@main:
; Line 83
	cmp	DWORD PTR _op$[ebp], 0
	je	SHORT $LN5@main
; Line 84
	push	OFFSET $SG9779
	call	_printf
	add	esp, 4
$LN5@main:
; Line 86
	jmp	$LN2@main
$LN3@main:
; Line 87
	push	OFFSET $SG9780
	call	_printf
	add	esp, 4
; Line 88
	xor	eax, eax
; Line 89
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv86 = -32						; size = 4
_cap$1 = -28						; size = 4
_j$2 = -24						; size = 4
_pos2$ = -20						; size = 4
_k$3 = -16						; size = 4
_pos$ = -12						; size = 4
_i$4 = -8						; size = 4
_tMask$5 = -3						; size = 1
_primera$ = -2						; size = 1
_mask$ = -1						; size = 1
_V$ = 8							; size = 4
_s$ = 12						; size = 4
_p$ = 16						; size = 4
_l$ = 20						; size = 4
_leer	PROC
; File c:\users\user\dropbox\aladthings\uniandes\infratec\main.c
; Line 127
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 128
	mov	BYTE PTR _mask$[ebp], 128		; 00000080H
; Line 129
	mov	BYTE PTR _primera$[ebp], 1
; Line 130
	mov	eax, DWORD PTR _p$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _pos2$[ebp], eax
; Line 131
	mov	DWORD PTR _pos$[ebp], 0
; Line 132
	mov	eax, DWORD PTR _p$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _j$2[ebp], eax
	mov	DWORD PTR _k$3[ebp], 0
	jmp	SHORT $LN4@leer
$LN2@leer:
	mov	eax, DWORD PTR _j$2[ebp]
	add	eax, 1
	mov	DWORD PTR _j$2[ebp], eax
	mov	ecx, DWORD PTR _k$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$3[ebp], ecx
$LN4@leer:
	cmp	DWORD PTR _k$3[ebp], 4
	jge	$LN1@leer
; Line 133
	mov	BYTE PTR _mask$[ebp], 128		; 00000080H
; Line 135
	movsx	edx, BYTE PTR _primera$[ebp]
	cmp	edx, 1
	jne	SHORT $LN8@leer
; Line 136
	mov	eax, DWORD PTR _p$[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN14@leer
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN14@leer:
	mov	DWORD PTR _cap$1[ebp], eax
; Line 137
	jmp	SHORT $LN9@leer
$LN8@leer:
; Line 138
	mov	DWORD PTR _cap$1[ebp], 0
$LN9@leer:
; Line 140
	mov	ecx, DWORD PTR _cap$1[ebp]
	mov	DWORD PTR _i$4[ebp], ecx
	jmp	SHORT $LN7@leer
$LN5@leer:
	mov	edx, DWORD PTR _i$4[ebp]
	add	edx, 1
	mov	DWORD PTR _i$4[ebp], edx
$LN7@leer:
	cmp	DWORD PTR _i$4[ebp], 8
	jge	SHORT $LN6@leer
; Line 141
	mov	eax, DWORD PTR _pos$[ebp]
	cmp	eax, DWORD PTR _l$[ebp]
	jne	SHORT $LN10@leer
; Line 142
	jmp	SHORT $LN6@leer
$LN10@leer:
; Line 144
	movzx	edx, BYTE PTR _mask$[ebp]
	mov	ecx, DWORD PTR _i$4[ebp]
	sar	edx, cl
	mov	BYTE PTR _tMask$5[ebp], dl
; Line 145
	mov	eax, DWORD PTR _V$[ebp]
	add	eax, DWORD PTR _pos2$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR _tMask$5[ebp]
	and	ecx, edx
	je	SHORT $LN12@leer
	mov	DWORD PTR tv86[ebp], 49			; 00000031H
	jmp	SHORT $LN13@leer
$LN12@leer:
	mov	DWORD PTR tv86[ebp], 48			; 00000030H
$LN13@leer:
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _pos$[ebp]
	mov	cl, BYTE PTR tv86[ebp]
	mov	BYTE PTR [eax], cl
; Line 146
	mov	BYTE PTR _primera$[ebp], 0
; Line 147
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
; Line 148
	jmp	SHORT $LN5@leer
$LN6@leer:
; Line 149
	mov	eax, DWORD PTR _pos2$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos2$[ebp], eax
; Line 150
	jmp	$LN2@leer
$LN1@leer:
; Line 151
	mov	esp, ebp
	pop	ebp
	ret	0
_leer	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv133 = -36						; size = 4
_x$ = -32						; size = 4
_cap$1 = -28						; size = 4
_k$2 = -24						; size = 4
_pos$ = -20						; size = 4
_i$3 = -16						; size = 4
_i$4 = -12						; size = 4
_j$5 = -8						; size = 4
_y$6 = -4						; size = 1
_primera$ = -3						; size = 1
_tMask$7 = -2						; size = 1
_mask$ = -1						; size = 1
_V$ = 8							; size = 4
_s$ = 12						; size = 4
_p$ = 16						; size = 4
_escribir PROC
; File c:\users\user\dropbox\aladthings\uniandes\infratec\main.c
; Line 93
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 94
	mov	BYTE PTR _mask$[ebp], 128		; 00000080H
; Line 95
	mov	BYTE PTR _primera$[ebp], 1
; Line 96
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _x$[ebp], eax
; Line 97
	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN4@escribir
$LN2@escribir:
	mov	ecx, DWORD PTR _i$4[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$4[ebp], ecx
$LN4@escribir:
	mov	edx, DWORD PTR _i$4[ebp]
	cmp	edx, DWORD PTR _x$[ebp]
	jge	SHORT $LN3@escribir
; Line 98
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$4[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR _i$4[ebp]
	mov	BYTE PTR [edx], cl
; Line 99
	jmp	SHORT $LN2@escribir
$LN3@escribir:
; Line 100
	mov	DWORD PTR _pos$[ebp], 0
; Line 101
	mov	eax, DWORD PTR _p$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _j$5[ebp], eax
	mov	DWORD PTR _k$2[ebp], 0
	jmp	SHORT $LN7@escribir
$LN5@escribir:
	mov	eax, DWORD PTR _j$5[ebp]
	add	eax, 1
	mov	DWORD PTR _j$5[ebp], eax
	mov	ecx, DWORD PTR _k$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$2[ebp], ecx
$LN7@escribir:
	cmp	DWORD PTR _k$2[ebp], 3
	jge	$LN1@escribir
; Line 102
	mov	BYTE PTR _mask$[ebp], 128		; 00000080H
; Line 104
	movsx	edx, BYTE PTR _primera$[ebp]
	cmp	edx, 1
	jne	SHORT $LN11@escribir
; Line 105
	mov	eax, DWORD PTR _p$[ebp]
	and	eax, -2147483641			; 80000007H
	jns	SHORT $LN17@escribir
	dec	eax
	or	eax, -8					; fffffff8H
	inc	eax
$LN17@escribir:
	mov	DWORD PTR _cap$1[ebp], eax
; Line 106
	jmp	SHORT $LN12@escribir
$LN11@escribir:
; Line 107
	mov	DWORD PTR _cap$1[ebp], 0
$LN12@escribir:
; Line 109
	mov	ecx, DWORD PTR _cap$1[ebp]
	mov	DWORD PTR _i$3[ebp], ecx
	jmp	SHORT $LN10@escribir
$LN8@escribir:
	mov	edx, DWORD PTR _i$3[ebp]
	add	edx, 1
	mov	DWORD PTR _i$3[ebp], edx
$LN10@escribir:
	cmp	DWORD PTR _i$3[ebp], 8
	jge	$LN9@escribir
; Line 110
	mov	eax, DWORD PTR _pos$[ebp]
	cmp	eax, DWORD PTR _x$[ebp]
	jne	SHORT $LN13@escribir
; Line 111
	jmp	SHORT $LN9@escribir
$LN13@escribir:
; Line 113
	movzx	edx, BYTE PTR _mask$[ebp]
	mov	ecx, DWORD PTR _i$3[ebp]
	sar	edx, cl
	mov	BYTE PTR _tMask$7[ebp], dl
; Line 114
	movsx	eax, BYTE PTR _tMask$7[ebp]
	xor	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _V$[ebp]
	add	ecx, DWORD PTR _j$5[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, eax
	mov	eax, DWORD PTR _V$[ebp]
	add	eax, DWORD PTR _j$5[ebp]
	mov	BYTE PTR [eax], dl
; Line 115
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN15@escribir
	mov	DWORD PTR tv133[ebp], 0
	jmp	SHORT $LN16@escribir
$LN15@escribir:
	mov	DWORD PTR tv133[ebp], 255		; 000000ffH
$LN16@escribir:
	mov	al, BYTE PTR tv133[ebp]
	mov	BYTE PTR _y$6[ebp], al
; Line 116
	movsx	ecx, BYTE PTR _tMask$7[ebp]
	movsx	edx, BYTE PTR _y$6[ebp]
	and	ecx, edx
	mov	eax, DWORD PTR _V$[ebp]
	add	eax, DWORD PTR _j$5[ebp]
	movzx	edx, BYTE PTR [eax]
	or	edx, ecx
	mov	eax, DWORD PTR _V$[ebp]
	add	eax, DWORD PTR _j$5[ebp]
	mov	BYTE PTR [eax], dl
; Line 117
	mov	BYTE PTR _primera$[ebp], 0
; Line 118
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$[ebp], ecx
; Line 119
	jmp	$LN8@escribir
$LN9@escribir:
; Line 120
	jmp	$LN5@escribir
$LN1@escribir:
; Line 121
	mov	esp, ebp
	pop	ebp
	ret	0
_escribir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _scanf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_scanf	PROC						; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\stdio.h
; Line 1278
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 1281
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
; Line 1282
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	0
	call	___acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfscanf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax
; Line 1283
	mov	DWORD PTR __ArgList$[ebp], 0
; Line 1284
	mov	eax, DWORD PTR __Result$[ebp]
; Line 1285
	mov	esp, ebp
	pop	ebp
	ret	0
_scanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __vfscanf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfscanf_l PROC					; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\stdio.h
; Line 1060
	push	ebp
	mov	ebp, esp
; Line 1061
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_scanf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___stdio_common_vfscanf
	add	esp, 24					; 00000018H
; Line 1064
	pop	ebp
	ret	0
__vfscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\stdio.h
; Line 952
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 955
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
; Line 956
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	1
	call	___acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax
; Line 957
	mov	DWORD PTR __ArgList$[ebp], 0
; Line 958
	mov	eax, DWORD PTR __Result$[ebp]
; Line 959
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\stdio.h
; Line 640
	push	ebp
	mov	ebp, esp
; Line 641
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 642
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_stdio_config.h
; Line 94
	push	ebp
	mov	ebp, esp
; Line 96
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
; Line 97
	pop	ebp
	ret	0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_stdio_config.h
; Line 85
	push	ebp
	mov	ebp, esp
; Line 87
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 88
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
